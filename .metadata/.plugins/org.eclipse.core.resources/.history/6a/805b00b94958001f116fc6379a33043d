#include "tm4c123gh6pm.h"

void PORTF_INIT()
{
    // Turn on Clock
    SYSCTL_RCGCGPIO_R = 0x20;
    while ((SYSCTL_PRGPIO_R & 0x20) == 0);
}

void PORTF_LEDs_INIT(void) //Initialize lEDs as GPIO
{
    // Configure the Board LEDs
    PORTF_INIT();
    // Turn off Alternate Function
    GPIO_PORTF_AFSEL_R &= 0xF1;
    // Turn off Analog Mode
    GPIO_PORTF_AMSEL_R &= 0xF1;
    // Configure all three pins as output
    GPIO_PORTF_DIR_R |= 0x0E;
    // Choose GPIO mode for the three pins
    GPIO_PORTF_PCTL_R &= 0xFFFF000F;
    // Enable pins
    GPIO_PORTF_DEN_R |= 0x0E;
    // Turn off pins
    GPIO_PORTF_DATA_R &= 0xF1;
}

void PORTF_LEDs_INIT_PWMmode(void) //Initialize lEDs pins as PWM
{
    // Initialize Port F
    PORTF_INIT();

    // Enable Alternate Function for PF1, PF2, PF3 (for PWM)
    GPIO_PORTF_AFSEL_R |= 0x0E;

    // Disable Analog Mode on PF1, PF2, PF3
    GPIO_PORTF_AMSEL_R &= ~0x0E;

    // Set PF1, PF2, PF3 as Outputs
    GPIO_PORTF_DIR_R |= 0x0E;

    // Configure PF1, PF2, PF3 for PWM
    GPIO_PORTF_PCTL_R &= 0xFFFF000F;  // Clear PF1, PF2, PF3 fields
    GPIO_PORTF_PCTL_R |= 0x00005550;  // Set PF1, PF2, PF3 for M1PWM5, M1PWM6, M1PWM7

    // Enable Digital Functionality on PF1, PF2, PF3
    GPIO_PORTF_DEN_R |= 0x0E;

    // Turn off LEDs (initially)
    GPIO_PORTF_DATA_R &= ~0x0E;
}

PWM_M1_INIT(void)
{
    // Enable Clock for PWM Module 1
    SYSCTL_RCGCPWM_R |= 0x02;      // Enable clock to PWM Module 1 (M1)

    // Enable Clock for Port F (if not already enabled)
    SYSCTL_RCGCGPIO_R |= 0x20;     // Enable clock to Port F

    // Wait for the module to be ready
    while ((SYSCTL_PRGPIO_R & 0x20) == 0); // Wait for Port F to be ready

    // Set the PWM Clock Divider (optional, for more precise control)
    SYSCTL_RCC_R |= SYSCTL_RCC_USEPWMDIV;  // Use PWM divider
    SYSCTL_RCC_R &= ~SYSCTL_RCC_PWMDIV_M;  // Clear PWM divider bits
    SYSCTL_RCC_R |= SYSCTL_RCC_PWMDIV_64;  // Set divider to 64 (or another value)

    // Disable the PWM generators during setup
    PWM1_2_CTL_R = 0;   // Disable PWM Generator 2 (controls M1PWM5 on PF1)
    PWM1_3_CTL_R = 0;   // Disable PWM Generator 3 (controls M1PWM6 on PF2)
    PWM1_3_CTL_R = 0;   // Disable PWM Generator 3 (controls M1PWM7 on PF3)

    // Configure the PWM generators
    PWM1_2_GENA_R = PWM_2_GENA_ACTCMPAD_ONE | PWM_2_GENA_ACTLOAD_ZERO;  // Set M1PWM5 (PF1)
    PWM1_3_GENA_R = PWM_3_GENA_ACTCMPAD_ONE | PWM_3_GENA_ACTLOAD_ZERO;  // Set M1PWM6 (PF2)
    PWM1_3_GENB_R = PWM_3_GENB_ACTCMPAD_ONE | PWM_3_GENB_ACTLOAD_ZERO;  // Set M1PWM7 (PF3)

    // Set the Load value for a 1 kHz PWM signal (example)
    PWM1_2_LOAD_R = 16000 - 1;  // Assuming a 16 MHz system clock, divided by 64
    PWM1_3_LOAD_R = 16000 - 1;

    // Set the compare value for 100% duty cycle (example)
    PWM1_2_CMPA_R = 0;  // 100% duty cycle for M1PWM5 (PF1)
    PWM1_3_CMPA_R = 0;  // 100% duty cycle for M1PWM6 (PF2)
    PWM1_3_CMPB_R = 0;  // 100% duty cycle for M1PWM7 (PF3)

    // Enable PWM generators
    PWM1_2_CTL_R |= PWM_2_CTL_ENABLE;  // Enable PWM Generator 2
    PWM1_3_CTL_R |= PWM_3_CTL_ENABLE;  // Enable PWM Generator 3

    // Enable PWM outputs on PF1, PF2, PF3
    PWM1_ENABLE_R |= PWM_ENABLE_PWM5EN | PWM_ENABLE_PWM6EN | PWM_ENABLE_PWM7EN;

    // The PWM signals are now active on PF1, PF2, PF3
}

int main(void)
{
    // Step 1: Initialize the GPIO Port F
    PORTF_INIT();

    // Step 2: Configure the LEDs on Port F (PF1, PF2, PF3) for PWM mode
    PORTF_LEDs_INIT_PWMmode();

    // Step 3: Initialize PWM Module 1
    PWM_M1_INIT();

    // Step 4: Set the PWM compare value to control the brightness
    // Since we want to turn on the blue LED at full brightness:
    PWM1_2_CMPA_R = 0;  // 100% duty cycle for M1PWM6 (connected to PF2 - Blue LED)

    // Infinite loop (in an embedded system, the main function typically doesn't return)
    while(1)
    {
        // The blue LED on PF2 should be turned on at full brightness
        // Nothing else is needed in the loop for this simple case
    }
}
