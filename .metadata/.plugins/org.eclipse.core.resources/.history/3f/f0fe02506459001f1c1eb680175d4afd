#include "tm4c123gh6pm.h"

//Configure PWM module 1 channel 6 for the blue led pin PF2
void PWM1_CH6_PF2(void)
{
    //Enable PWM1 module clock
    SYSCTL_RCGCPWM_R |= (1<<1);

    //Enable Clock for PORTF
    SYSCTL_RCGCGPIO_R |= (1<<5);
    while((SYSCTL_PRGPIO_R & 0x20) == 0);

    //Use SystemClock for PWM 16MHz
    SYSCTL_RCC_R &= ~(1<<20);

    //Select Alternate function for PF2
    GPIO_PORTF_AFSEL_R |= (1<<2);

    //Select PWM mode for PF2
    GPIO_PORTF_PCTL_R = 0x00000500;

    //Enable the pin
    GPIO_PORTF_DEN_R |= (1<<2);

    //Disable the PWM channel 6 before configuration
    PWM1_3_CTL_R &= ~(1<<0);

    //Select DownCount mode
    PWM1_3_CTL_R &= ~(1<<1);

    //Configure the load value to be 1600 meaning that the frequency will be 10KHz
    PWM1_3_LOAD_R = 1600;

    //Set the DutyCycle
    PWM1_3_CMPA_R = 0;

    //When the PWM timer starts counting from 1600 it drives the PF2 to high
    PWM1_3_GENA_R |= (1<<2) | (1<<3);

    //When the counter reaches the compartorA it will drive the pin to low
    PWM1_3_GENA_R &= ~(1<<6);
    PWM1_3_GENA_R |= (1<<7); //Writing the value of 0x2 to bits 6 and 7

    //Enable the PWM block 3
    PWM1_3_CTL_R |= (1<<0);

    //Enable PWM channel 6 output
    PWM1_ENABLE_R |= (1<<6);
}

void delay(long d)
{
    while(d--);
}


void APP1(void) //Turning the blue led off and on in a smooth way by varying brightness
{
    uint16 i;
    PWM1_CH6_PF2();
    while (1)
    {
        for(i = 0; i < 1600; i++)
        {
            PWM1_3_CMPA_R = i;
            delay(1000);
        }

        delay(1000000);

        for(i = 1600; i > 0; i--)
        {
            PWM1_3_CMPA_R = i;
            delay(1000);
        }

        delay(1000000);
    }
}


void PWM1_CH5_PF1(void) {
    SYSCTL_RCGCPWM_R |= (1 << 1);   // Enable clock for PWM module 1
    SYSCTL_RCGCGPIO_R |= (1 << 5);  // Enable clock for Port F
    while ((SYSCTL_PRGPIO_R & 0x20) == 0); // Wait until Port F is ready
    SYSCTL_RCC_R &= ~(1 << 20);     // Directly feed the PWM module with the system clock

    GPIO_PORTF_AFSEL_R |= (1 << 1);  // Enable alternate function on PF1
    GPIO_PORTF_PCTL_R = (GPIO_PORTF_PCTL_R & 0xFFFFFF0F) | 0x00000050; // M1PWM5 on PF1
    GPIO_PORTF_DEN_R |= (1 << 1);    // Digital enable for PF1
    GPIO_PORTF_DIR_R |= (1 << 1);    // Set PF1 as output
    GPIO_PORTF_AMSEL_R &= ~(1 << 1); // Disable analog mode on PF1

    PWM1_2_CTL_R = 0; // Disable generator during configuration
    PWM1_2_GENA_R = (PWM_2_GENA_ACTCMPAD_ONE | PWM_2_GENA_ACTLOAD_ZERO); // High on load, low on compare
    PWM1_2_LOAD_R = (16000000 / 10000) - 1; // Load value for 10kHz PWM
    PWM1_2_CMPA_R = PWM1_2_LOAD_R / 2; // 50% duty cycle
    PWM1_2_CTL_R |= (1 << 0); // Enable the PWM generator

    PWM1_ENABLE_R |= (1 << 5); // Enable M1PWM5 (PF1)
}

int main(void) {
    PWM1_CH5_PF1();
    while (1) {
        // Infinite loop
    }
}
