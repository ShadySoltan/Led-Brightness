#include "tm4c123gh6pm.h"

void delay(long d)
{
    while(d--);
}

PWM1_CH567_INIT(void)
{
    //Enable PWM1 module clock
    SYSCTL_RCGCPWM_R |= (1<<1);

    //Enable Clock for PORTF
    SYSCTL_RCGCGPIO_R |= (1<<5);
    while((SYSCTL_PRGPIO_R & 0x20) == 0);

    //Use SystemClock for PWM 16MHz
    SYSCTL_RCC_R &= ~(1<<20);

    //Configure Three Pins PF1, PF2, and PF3 as PWM pins
    GPIO_PORTF_AFSEL_R |= (1<<1) | (1<<2) | (1<<3);
    GPIO_PORTF_PCTL_R = 0x00005550;
    GPIO_PORTF_DEN_R |= (1<<1) | (1<<2) | (1<<3);

    //Configure PWM Module1 Generators 2 and 3
    //Disable the PWM channels 5 6 7 before configuration
    PWM1_3_CTL_R &= ~(1<<0);
    PWM1_2_CTL_R &= ~(1<<0);
    //Select DownCount mode
    PWM1_3_CTL_R &= ~(1<<1);
    PWM1_2_CTL_R &= ~(1<<1);
    //Configure the load value to be 1600 meaning that the frequency will be 10KHz
    PWM1_3_LOAD_R = 1600;
    PWM1_2_LOAD_R = 1600;
    //Set the DutyCycle
    PWM1_3_CMPA_R = 0;
    PWM1_2_CMPA_R = 0;

    //When the PWM timer starts counting from 1600 it drives the PF1 PF2 PF3 to high
    PWM1_3_GENA_R |= (1<<2) | (1<<3);
    PWM1_3_GENB_R |= (1<<2) | (1<<3);
    PWM1_2_GENB_R |= (1<<2) | (1<<3);

    //When the counter reaches the compartorA it will drive the pins to low
    PWM1_3_GENA_R &= ~(1<<6);
    PWM1_3_GENA_R |= (1<<7);
    PWM1_3_GENB_R &= ~(1<<6);
    PWM1_3_GENB_R |= (1<<7);
    PWM1_2_GENB_R &= ~(1<<6);
    PWM1_2_GENB_R |= (1<<7);

    //Enable the two generators
    PWM1_2_CTL_R |= (1<<0);
    PWM1_3_CTL_R |= (1<<0);
}

void PWM_CH5_ON(void)
{
    PWM1_ENABLE_R |= (1<<5);
}

void PWM_CH5_OFF(void)
{
    PWM1_ENABLE_R &= ~(1<<5);
}


void PWM_CH6_ON(void)
{
    PWM1_ENABLE_R |= (1<<6);
}

void PWM_CH6_OFF(void)
{
    PWM1_ENABLE_R &= ~(1<<6);
}


void PWM_CH7_ON(void)
{
    PWM1_ENABLE_R |= (1<<7);
}

void PWM_CH7_OFF(void)
{
    PWM1_ENABLE_R &= ~(1<<7);
}

uint16 i;

void Run_Red(void)
{
    PWM_CH5_ON();
    for(i = 1600; i > 0; i--)
    {
        PWM1_2_CMPA_R = i;
        delay(1000);
    }


    delay(10000);
    for(i = 0; i < 1600; i++)
    {
        PWM1_2_CMPA_R = i;
        delay(1000);
    }
    PWM_CH5_OFF();
}

void Run_Green(void)
{
    PWM_CH7_ON();
    for(i = 1600; i > 0; i--)
    {
        PWM1_3_CMPA_R = i;
        delay(1000);
    }


    delay(10000);
    for(i = 0; i < 1600; i++)
    {
        PWM1_3_CMPA_R = i;
        delay(1000);
    }
    PWM_CH7_OFF();
}

void Run_Blue(void)
{
    PWM_CH6_ON();
    for(i = 1600; i > 0; i--)
    {
        PWM1_3_CMPA_R = i;
        delay(1000);
    }


    delay(10000);
    for(i = 0; i < 1600; i++)
    {
        PWM1_3_CMPA_R = i;
        delay(1000);
    }
    PWM_CH6_OFF();
}

void Run_MIX1(void)
{
    PWM_CH5_ON();
    PWM_CH6_ON();
    for(i = 1600; i > 0; i--)
    {
        PWM1_2_CMPA_R = i;
        PWM1_3_CMPA_R = i;
        delay(1000);
    }


    delay(10000);
    for(i = 0; i < 1600; i++)
    {
        PWM1_2_CMPA_R = i;
        PWM1_3_CMPA_R = i;
        delay(1000);
    }
    PWM_CH5_OFF();
    PWM_CH6_OFF();
}

void Run_MIX2(void)
{
    PWM_CH5_ON();
    PWM_CH7_ON();
    for(i = 1600; i > 0; i--)
    {
        PWM1_2_CMPA_R = i;
        PWM1_3_CMPA_R = i;
        delay(1000);
    }


    delay(10000);
    for(i = 0; i < 1600; i++)
    {
        PWM1_2_CMPA_R = i;
        PWM1_3_CMPA_R = i;
        delay(1000);
    }
    PWM_CH5_OFF();
    PWM_CH7_OFF();
}

void Run_MIX3(void)
{
    PWM_CH6_ON();
    PWM_CH7_ON();
    for(i = 1600; i > 0; i--)
    {
        PWM1_3_CMPA_R = i;
        delay(1000);
    }


    delay(10000);
    for(i = 0; i < 1600; i++)
    {
        PWM1_3_CMPA_R = i;
        delay(1000);
    }
    PWM_CH6_OFF();
    PWM_CH7_OFF();
}

void Run_MIX4(void)
{
    PWM_CH5_ON();
    PWM_CH6_ON();
    PWM_CH7_ON();
    for(i = 1600; i > 0; i--)
    {
        PWM1_2_CMPA_R = i;
        PWM1_3_CMPA_R = i;
        delay(1000);
    }


    delay(10000);
    for(i = 0; i < 1600; i++)
    {
        PWM1_2_CMPA_R = i;
        PWM1_3_CMPA_R = i;
        delay(1000);
    }
    PWM_CH5_OFF();
    PWM_CH6_OFF();
    PWM_CH7_OFF();
}


void PWM1_Channel5_Init(uint16 period, uint16 duty) {
    // 1. Enable the clock to the PWM1 and GPIOF modules
    SYSCTL_RCGCPWM_R |= SYSCTL_RCGCPWM_R1;  // Enable clock for PWM1
    SYSCTL_RCGCGPIO_R |= SYSCTL_RCGCGPIO_R5;  // Enable clock for GPIO Port F

    // 2. Wait for the PWM1 and GPIOF modules to be ready
    while((SYSCTL_PRPWM_R & SYSCTL_PRPWM_R1) == 0);  // Wait for PWM1 module to be ready
    while((SYSCTL_PRGPIO_R & SYSCTL_PRGPIO_R5) == 0);  // Wait for GPIOF module to be ready

    // 3. Set the appropriate GPIO pins for PWM functionality
    GPIO_PORTF_AFSEL_R |= 0x02;  // Enable alternate function on PF1
    GPIO_PORTF_PCTL_R &= ~0x000000F0;  // Clear PCTL for PF1
    GPIO_PORTF_PCTL_R |= 0x00000050;  // Configure PF1 as M1PWM5
    GPIO_PORTF_DEN_R |= 0x02;  // Enable digital function for PF1
    GPIO_PORTF_DIR_R |= 0x02;  // Set PF1 as output

    // 4. Disable PWM Generator 2 before configuring it
    PWM1_2_CTL_R &= ~PWM_1_CTL_ENABLE;  // Disable PWM generator 2

    // 5. Configure the PWM generator for countdown mode with immediate updates to the parameters
    PWM1_2_GENB_R = (PWM_1_GENB_ACTLOAD_ZERO | PWM_1_GENB_ACTCMPAD_ONE);

    // 6. Set the PWM period
    PWM1_2_LOAD_R = period - 1;

    // 7. Set the PWM duty cycle
    PWM1_2_CMPA_R = duty - 1;

    // 8. Set the PWM prescaler to divide the system clock by 64
    PWM1_2_CTL_R = (PWM1_2_CTL_R & ~0x0000FC00) | (0x3F << 10);

    // 9. Enable the PWM output and the PWM generator
    PWM1_ENABLE_R |= PWM_ENABLE_PWM5EN;  // Enable PWM5 output (PF1)
    PWM1_2_CTL_R |= PWM_1_CTL_ENABLE;  // Enable PWM generator 2
}


int main()
{
    PWM1_Channel5_Init(24, 7);
    while(1)
    {

    }
}

